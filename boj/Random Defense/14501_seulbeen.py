# 퇴사
# 44분
"""
dp로 풀면 될듯한 생각이 들었다.
i번째 날의 상담에 걸리는 시간이 k일이라고 했을때, i+k 가 퇴사일보다 크다면 상담 진행 불가
"""
"""
정방향으로 dp를 진행하려다보니 반복문이 복잡해지는 느낌이 들었다.
그렇다면 차라리 퇴사일부터 거꾸로 dp를 적용하는게 더 편할듯...?
(굳이 거꾸로 안풀어도 풀리긴 하겠지만 거꾸로 푸는게 덜 복잡할 것)
"""
import sys
input=sys.stdin.readline

N=int(input())
sangdam=[[0,0]]

#상담 소요시간 및 받는 금액을 리스트로 정리
for _ in range(N):
    t,p=map(int,input().split(" "))
    sangdam.append([t,p])

# 인덱스 계산 편의성 및 인덱스 범위 초과 관리를 위해 0일째(상담시작 전)과 퇴사일 당일날에 해당하는 더미데이터를 넣었다
dp = [sangdam[i][1] for i in range(N + 1)] + [0]


# [10, 20, 10, 20, 15, 40, 200]


#마지막 상담날부터 거꾸로 dp 진행
for i in range(N, 0, -1):
    s_t, s_p = sangdam[i][0], sangdam[i][1]
    
    # 만약 현재 날짜에 상담을 진행하면 퇴사일을 넘어가는 경우, 해당 날짜 상담을 진행하지 않음
    # (더미데이터를 넣은 이유)
    if i + s_t - 1 > N:
        dp[i] = dp[i + 1]

    # i일째의 최적상황 : i번째 상담을 진행하지 않고 i+1번째 상담을 하는게 이득인 경우 vs i번째 상담 진행하고 t일후 상담까지 진행하는 경우    
    else:
        dp[i] = max(dp[i + 1], dp[i + s_t] + dp[i])
# print(dp)
print(dp[1])

